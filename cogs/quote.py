from dataclasses import dataclass
from typing import Optional

import asyncio
import discord
from discord.ext import commands
from discord import app_commands
import re

@dataclass
class Quote:
    author: str
    content: str
    id: int

def db_get_quote_id(connection, table, id):
    cur = connection.cursor()
    quote = cur.execute(f"""
        SELECT *, ROWID FROM '{table}' WHERE ROWID = {id}
    """)
    return quote.fetchone()
async def get_quote_id(connection, table, id):
    event_loop = asyncio.get_running_loop()
    quote = await event_loop.run_in_executor(None, db_get_quote_id, connection, table, id)
    if quote: return Quote(quote[0], quote[1], quote[-1])

def db_get_random_quote(connection, table):
    cur = connection.cursor()
    quote = cur.execute(f"""
        SELECT *, ROWID FROM '{table}' WHERE quote IS NOT NULL ORDER BY RANDOM() LIMIT 1
    """)
    return quote.fetchone()
async def get_random_quote(connection, table):    
    event_loop = asyncio.get_running_loop()
    quote = await event_loop.run_in_executor(None, db_get_random_quote, connection, table)
    if quote: return Quote(quote[0], quote[1], quote[-1])

def db_add_quote(connection, table, author, quote):
    cur = connection.cursor()
    cur.execute(f"CREATE TABLE IF NOT EXISTS '{table}'(author, quote)")
    cur.execute(f"""
        INSERT INTO '{table}' VALUES
            (?, ?)
        """, (author, quote))
    connection.commit()
    return cur.lastrowid
async def add_quote(connection, table, author, quote):
    event_loop = asyncio.get_running_loop()
    return await event_loop.run_in_executor(None, db_add_quote, connection, table, author, quote)

def db_delete_quote(connection, table, id):
    cur = connection.cursor()
    cur.execute(f"""
        DELETE FROM '{table}'
        WHERE ROWID = ?
        """, (id,))
    connection.commit()
async def delete_quote(connection, table, id):
    event_loop = asyncio.get_running_loop()
    return await event_loop.run_in_executor(None, db_delete_quote, connection, table, id)

class randomquote(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def check_connection(self):
        try:
            cur = self.bot.quote_db.cursor()
            cur.execute("""SELECT 1""")
        except Exception as ex:
            self.bot.logger.info(f"Reconnecting to Quote Database... (Reason: {repr(ex)})")
            self.bot.quote_db = self.bot.connect_quote_db()
            return self.check_connection()
        return self.bot.quote_db
                
    async def get_connection(self):
        self.event_loop = asyncio.get_running_loop()
        return await self.event_loop.run_in_executor(None, self.check_connection)

    @app_commands.command(name="random_quote", description="get random quote")
    async def quote(self,
    interaction: discord.Interaction,
    id: Optional[int]):
        connection = await self.get_connection()
        if id: quote = await get_quote_id(connection, table=interaction.guild.id, id=id)
        else: quote = await get_random_quote(connection, table=interaction.guild.id)

        await interaction.response.send_message(f'{quote.content}\n### `- {quote.author} | ID: {quote.id}`', allowed_mentions=discord.AllowedMentions.none())

    @app_commands.command(name="add_quote", description="add a quote")
    async def addquote(self, interaction: discord.Interaction, quote: str, by: str):
        if not interaction.user.guild_permissions.manage_messages:
            await interaction.response.send_message("You dont have the permission to use this command.",ephemeral=True)
        else:
            await add_quote(await self.get_connection(), table=interaction.guild.id, author=by, quote=quote)
            await interaction.response.send_message(f"Added {quote} by {by}")

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.content.lower() == "aq" or message.content == "<@949479338275913799>":
            messager = await message.channel.fetch_message(message.reference.message_id)
            for role in message.author.roles:
                if role.id == 1330210181187113051: return await message.reply("erm you mighht been banned fom quoting idk", allowed_mentions=discord.AllowedMentions.none())
            if messager.author == self.bot.user:
                if messager.content != "generated by deltafall-bot": return
            if messager.content == "" and not messager.attachments: return await message.reply("its just an empty text you idiot", allowed_mentions=discord.AllowedMentions.none())
            content = messager.content
            display_content = content
            if len(messager.content) > 500: display_content = f'{messager.content[:500]}...'
            if messager.attachments:
                content = (f"{messager.content} | {messager.attachments[0].url}")
                display_content = (f"{display_content} | {messager.attachments[0].url}")
            quote_id = await add_quote(await self.get_connection(), table=message.guild.id, author=messager.author.name, quote=content)
            embed=discord.Embed(description=f'## Quote Added\n{display_content}', color=0x57e389)
            embed.add_field(name="", value=f"-# \- {messager.author.name}", inline=True)
            await message.reply(content=f"`ID: {quote_id}`", embed=embed, allowed_mentions=discord.AllowedMentions.none())

        if message.content.lower() == "dq":
            messager = await message.channel.fetch_message(message.reference.message_id)
            if messager.author != self.bot.user: return
            content = messager.content
            id = re.findall("ID:\s*(\d+)", content)[0]
            await delete_quote(await self.get_connection(), table=message.guild.id, id=id)
            embed=discord.Embed(description=f'## Quote Deleted\nQuote `ID: {id}` has been deleted.', color=0xff4545)
            await message.reply(embed=embed, allowed_mentions=discord.AllowedMentions.none())

async def setup(bot):
    await bot.add_cog(randomquote(bot))
